{"version":3,"sources":["webpack:///../../../src/components/VGrid/grid.ts","webpack:///../../../src/components/VGrid/VContainer.ts","webpack:///../../../src/components/VAutocomplete/VAutocomplete.ts"],"names":["VGrid","name","Vue","extend","functional","props","id","String","tag","type","default","render","h","data","children","staticClass","trim","attrs","classes","Object","keys","filter","key","value","startsWith","length","join","domProps","Grid","fluid","Boolean","mergeData","class","Array","concat","defaultMenuProps","VSelectMenuProps","offsetY","offsetOverflow","transition","VSelect","allowOverflow","autoSelectFirst","Function","item","queryText","itemText","toLocaleLowerCase","indexOf","hideNoData","menuProps","options","noFilter","searchInput","lazySearch","this","computed","call","selectedIndex","computedItems","filteredItems","selectedValues","selectedItems","map","getValue","hasDisplayedItems","hideSelected","some","hasItem","currentRange","selectedItem","getText","isSearching","internalSearch","allItems","getPropertyFromItem","text","get","set","val","$emit","isAnyValueAllowed","isDirty","searchIsDirty","multiple","menuCanShow","isFocused","$_menuProps","contentClass","find","i","valueComparator","internalValue","listData","items","virtualizedItems","watch","document","addEventListener","onCopy","$refs","input","select","removeEventListener","blur","updateSelf","isMenuActive","hasSlot","oldVal","activateMenu","created","setSearch","destroyed","methods","onFilteredItemsChanged","preSelectedItem","menu","listIndex","setMenuIndex","findIndex","$nextTick","getTiles","onInternalSearchChanged","updateMenuDimensions","updateDimensions","changeSelectedIndex","keyCode","keyCodes","left","right","backspace","delete","deleteCurrentItem","curIndex","curItem","isInteractive","getDisabled","lastIndex","nextIndex","nextItem","selectItem","setValue","clearableCallback","genInput","VTextField","getObjectValueByPath","autocomplete","genInputSlot","slot","role","genSelections","onClick","e","onFocus","isAppendInner","target","onInput","badInput","validity","onKeyDown","ctrlKey","home","end","includes","onSpaceDown","onTabDown","onUpDown","preventDefault","setSelectedItems","event","currentItem","currentItemText","clipboardData","setData"],"mappings":"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","file":"js/chunk-2f0d35ec.92b0a1c0.js","sourcesContent":["// Types\nimport Vue, { VNode } from 'vue'\n\nexport default function VGrid (name: string) {\n  /* @vue/component */\n  return Vue.extend({\n    name: `v-${name}`,\n\n    functional: true,\n\n    props: {\n      id: String,\n      tag: {\n        type: String,\n        default: 'div',\n      },\n    },\n\n    render (h, { props, data, children }): VNode {\n      data.staticClass = (`${name} ${data.staticClass || ''}`).trim()\n\n      const { attrs } = data\n      if (attrs) {\n        // reset attrs to extract utility clases like pa-3\n        data.attrs = {}\n        const classes = Object.keys(attrs).filter(key => {\n          // TODO: Remove once resolved\n          // https://github.com/vuejs/vue/issues/7841\n          if (key === 'slot') return false\n\n          const value = attrs[key]\n\n          // add back data attributes like data-test=\"foo\" but do not\n          // add them as classes\n          if (key.startsWith('data-')) {\n            data.attrs![key] = value\n            return false\n          }\n\n          return value || typeof value === 'string'\n        })\n\n        if (classes.length) data.staticClass += ` ${classes.join(' ')}`\n      }\n\n      if (props.id) {\n        data.domProps = data.domProps || {}\n        data.domProps.id = props.id\n      }\n\n      return h(props.tag, data, children)\n    },\n  })\n}\n","import './_grid.sass'\nimport './VGrid.sass'\n\nimport Grid from './grid'\n\nimport mergeData from '../../util/mergeData'\n\n/* @vue/component */\nexport default Grid('container').extend({\n  name: 'v-container',\n  functional: true,\n  props: {\n    id: String,\n    tag: {\n      type: String,\n      default: 'div',\n    },\n    fluid: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  render (h, { props, data, children }) {\n    let classes\n    const { attrs } = data\n    if (attrs) {\n      // reset attrs to extract utility clases like pa-3\n      data.attrs = {}\n      classes = Object.keys(attrs).filter(key => {\n        // TODO: Remove once resolved\n        // https://github.com/vuejs/vue/issues/7841\n        if (key === 'slot') return false\n\n        const value = attrs[key]\n\n        // add back data attributes like data-test=\"foo\" but do not\n        // add them as classes\n        if (key.startsWith('data-')) {\n          data.attrs![key] = value\n          return false\n        }\n\n        return value || typeof value === 'string'\n      })\n    }\n\n    if (props.id) {\n      data.domProps = data.domProps || {}\n      data.domProps.id = props.id\n    }\n\n    return h(\n      props.tag,\n      mergeData(data, {\n        staticClass: 'container',\n        class: Array<any>({\n          'container--fluid': props.fluid,\n        }).concat(classes || []),\n      }),\n      children\n    )\n  },\n})\n","// Styles\nimport './VAutocomplete.sass'\n\n// Extensions\nimport VSelect, { defaultMenuProps as VSelectMenuProps } from '../VSelect/VSelect'\nimport VTextField from '../VTextField/VTextField'\n\n// Utilities\nimport mergeData from '../../util/mergeData'\nimport {\n  getObjectValueByPath,\n  getPropertyFromItem,\n  keyCodes,\n} from '../../util/helpers'\n\n// Types\nimport { PropType, VNode } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\nconst defaultMenuProps = {\n  ...VSelectMenuProps,\n  offsetY: true,\n  offsetOverflow: true,\n  transition: false,\n}\n\n/* @vue/component */\nexport default VSelect.extend({\n  name: 'v-autocomplete',\n\n  props: {\n    allowOverflow: {\n      type: Boolean,\n      default: true,\n    },\n    autoSelectFirst: {\n      type: Boolean,\n      default: false,\n    },\n    filter: {\n      type: Function,\n      default: (item: any, queryText: string, itemText: string) => {\n        return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) > -1\n      },\n    } as PropValidator<(item: any, queryText: string, itemText: string) => boolean>,\n    hideNoData: Boolean,\n    menuProps: {\n      type: VSelect.options.props.menuProps.type,\n      default: () => defaultMenuProps,\n    },\n    noFilter: Boolean,\n    searchInput: {\n      type: String as PropType<string | null>,\n    },\n  },\n\n  data () {\n    return {\n      lazySearch: this.searchInput,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VSelect.options.computed.classes.call(this),\n        'v-autocomplete': true,\n        'v-autocomplete--is-selecting-index': this.selectedIndex > -1,\n      }\n    },\n    computedItems (): object[] {\n      return this.filteredItems\n    },\n    selectedValues (): object[] {\n      return this.selectedItems.map(item => this.getValue(item))\n    },\n    hasDisplayedItems (): boolean {\n      return this.hideSelected\n        ? this.filteredItems.some(item => !this.hasItem(item))\n        : this.filteredItems.length > 0\n    },\n    currentRange (): number {\n      if (this.selectedItem == null) return 0\n\n      return String(this.getText(this.selectedItem)).length\n    },\n    filteredItems (): object[] {\n      if (!this.isSearching || this.noFilter || this.internalSearch == null) return this.allItems\n\n      return this.allItems.filter(item => {\n        const value = getPropertyFromItem(item, this.itemText)\n        const text = value != null ? String(value) : ''\n\n        return this.filter(item, String(this.internalSearch), text)\n      })\n    },\n    internalSearch: {\n      get (): string | null {\n        return this.lazySearch\n      },\n      set (val: any) { // TODO: this should be `string | null` but it breaks lots of other types\n        // emit update event only when the new\n        // search value is different from previous\n        if (this.lazySearch !== val) {\n          this.lazySearch = val\n          this.$emit('update:search-input', val)\n        }\n      },\n    },\n    isAnyValueAllowed (): boolean {\n      return false\n    },\n    isDirty (): boolean {\n      return this.searchIsDirty || this.selectedItems.length > 0\n    },\n    isSearching (): boolean {\n      return (\n        this.multiple &&\n        this.searchIsDirty\n      ) || (\n        this.searchIsDirty &&\n        this.internalSearch !== this.getText(this.selectedItem)\n      )\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems || !this.hideNoData\n    },\n    $_menuProps (): object {\n      const props = VSelect.options.computed.$_menuProps.call(this);\n      (props as any).contentClass = `v-autocomplete__content ${(props as any).contentClass || ''}`.trim()\n      return {\n        ...defaultMenuProps,\n        ...props,\n      }\n    },\n    searchIsDirty (): boolean {\n      return this.internalSearch != null &&\n        this.internalSearch !== ''\n    },\n    selectedItem (): any {\n      if (this.multiple) return null\n\n      return this.selectedItems.find(i => {\n        return this.valueComparator(this.getValue(i), this.getValue(this.internalValue))\n      })\n    },\n    listData () {\n      const data = VSelect.options.computed.listData.call(this) as any\n\n      data.props = {\n        ...data.props,\n        items: this.virtualizedItems,\n        noFilter: (\n          this.noFilter ||\n          !this.isSearching ||\n          !this.filteredItems.length\n        ),\n        searchInput: this.internalSearch,\n      }\n\n      return data\n    },\n  },\n\n  watch: {\n    filteredItems: 'onFilteredItemsChanged',\n    internalValue: 'setSearch',\n    isFocused (val) {\n      if (val) {\n        document.addEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.select()\n      } else {\n        document.removeEventListener('copy', this.onCopy)\n        this.blur()\n        this.updateSelf()\n      }\n    },\n    isMenuActive (val) {\n      if (val || !this.hasSlot) return\n\n      this.lazySearch = null\n    },\n    items (val, oldVal) {\n      // If we are focused, the menu\n      // is not active, hide no data is enabled,\n      // and items change\n      // User is probably async loading\n      // items, try to activate the menu\n      if (\n        !(oldVal && oldVal.length) &&\n        this.hideNoData &&\n        this.isFocused &&\n        !this.isMenuActive &&\n        val.length\n      ) this.activateMenu()\n    },\n    searchInput (val: string) {\n      this.lazySearch = val\n    },\n    internalSearch: 'onInternalSearchChanged',\n    itemText: 'updateSelf',\n  },\n\n  created () {\n    this.setSearch()\n  },\n\n  destroyed () {\n    document.removeEventListener('copy', this.onCopy)\n  },\n\n  methods: {\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      // TODO: How is the watcher triggered\n      // for duplicate items? no idea\n      if (val === oldVal) return\n\n      if (!this.autoSelectFirst) {\n        const preSelectedItem = oldVal[this.$refs.menu.listIndex]\n\n        if (preSelectedItem) {\n          this.setMenuIndex(val.findIndex(i => i === preSelectedItem))\n        } else {\n          this.setMenuIndex(-1)\n        }\n        this.$emit('update:list-index', this.$refs.menu.listIndex)\n      }\n\n      this.$nextTick(() => {\n        if (\n          !this.internalSearch ||\n          (val.length !== 1 &&\n            !this.autoSelectFirst)\n        ) return\n\n        this.$refs.menu.getTiles()\n\n        if (this.autoSelectFirst && val.length) {\n          this.setMenuIndex(0)\n          this.$emit('update:list-index', this.$refs.menu.listIndex)\n        }\n      })\n    },\n    onInternalSearchChanged () {\n      this.updateMenuDimensions()\n    },\n    updateMenuDimensions () {\n      // Type from menuable is not making it through\n      this.isMenuActive && this.$refs.menu && this.$refs.menu.updateDimensions()\n    },\n    changeSelectedIndex (keyCode: number) {\n      // Do not allow changing of selectedIndex\n      // when search is dirty\n      if (this.searchIsDirty) return\n\n      if (this.multiple && keyCode === keyCodes.left) {\n        if (this.selectedIndex === -1) {\n          this.selectedIndex = this.selectedItems.length - 1\n        } else {\n          this.selectedIndex--\n        }\n      } else if (this.multiple && keyCode === keyCodes.right) {\n        if (this.selectedIndex >= this.selectedItems.length - 1) {\n          this.selectedIndex = -1\n        } else {\n          this.selectedIndex++\n        }\n      } else if (keyCode === keyCodes.backspace || keyCode === keyCodes.delete) {\n        this.deleteCurrentItem()\n      }\n    },\n    deleteCurrentItem () {\n      const curIndex = this.selectedIndex\n      const curItem = this.selectedItems[curIndex]\n\n      // Do nothing if input or item is disabled\n      if (\n        !this.isInteractive ||\n        this.getDisabled(curItem)\n      ) return\n\n      const lastIndex = this.selectedItems.length - 1\n\n      // Select the last item if\n      // there is no selection\n      if (\n        this.selectedIndex === -1 &&\n        lastIndex !== 0\n      ) {\n        this.selectedIndex = lastIndex\n\n        return\n      }\n\n      const length = this.selectedItems.length\n      const nextIndex = curIndex !== length - 1\n        ? curIndex\n        : curIndex - 1\n      const nextItem = this.selectedItems[nextIndex]\n\n      if (!nextItem) {\n        this.setValue(this.multiple ? [] : null)\n      } else {\n        this.selectItem(curItem)\n      }\n\n      this.selectedIndex = nextIndex\n    },\n    clearableCallback () {\n      this.internalSearch = null\n\n      VSelect.options.methods.clearableCallback.call(this)\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.data = mergeData(input.data!, {\n        attrs: {\n          'aria-activedescendant': getObjectValueByPath(this.$refs.menu, 'activeTile.id'),\n          autocomplete: getObjectValueByPath(input.data!, 'attrs.autocomplete', 'off'),\n        },\n        domProps: { value: this.internalSearch },\n      })\n\n      return input\n    },\n    genInputSlot () {\n      const slot = VSelect.options.methods.genInputSlot.call(this)\n\n      slot.data!.attrs!.role = 'combobox'\n\n      return slot\n    },\n    genSelections (): VNode | never[] {\n      return this.hasSlot || this.multiple\n        ? VSelect.options.methods.genSelections.call(this)\n        : []\n    },\n    onClick (e: MouseEvent) {\n      if (!this.isInteractive) return\n\n      this.selectedIndex > -1\n        ? (this.selectedIndex = -1)\n        : this.onFocus()\n\n      if (!this.isAppendInner(e.target)) this.activateMenu()\n    },\n    onInput (e: Event) {\n      if (\n        this.selectedIndex > -1 ||\n        !e.target\n      ) return\n\n      const target = e.target as HTMLInputElement\n      const value = target.value\n\n      // If typing and menu is not currently active\n      if (target.value) this.activateMenu()\n\n      if (!this.multiple && value === '') this.deleteCurrentItem()\n\n      this.internalSearch = value\n      this.badInput = target.validity && target.validity.badInput\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      if (\n        e.ctrlKey ||\n        ![keyCodes.home, keyCodes.end].includes(keyCode)\n      ) {\n        VSelect.options.methods.onKeyDown.call(this, e)\n      }\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onSpaceDown (e: KeyboardEvent) { /* noop */ },\n    onTabDown (e: KeyboardEvent) {\n      VSelect.options.methods.onTabDown.call(this, e)\n      this.updateSelf()\n    },\n    onUpDown (e: Event) {\n      // Prevent screen from scrolling\n      e.preventDefault()\n\n      // For autocomplete / combobox, cycling\n      // interfers with native up/down behavior\n      // instead activate the menu\n      this.activateMenu()\n    },\n    selectItem (item: object) {\n      VSelect.options.methods.selectItem.call(this, item)\n      this.setSearch()\n    },\n    setSelectedItems () {\n      VSelect.options.methods.setSelectedItems.call(this)\n\n      // #4273 Don't replace if searching\n      // #4403 Don't replace if focused\n      if (!this.isFocused) this.setSearch()\n    },\n    setSearch () {\n      // Wait for nextTick so selectedItem\n      // has had time to update\n      this.$nextTick(() => {\n        if (\n          !this.multiple ||\n          !this.internalSearch ||\n          !this.isMenuActive\n        ) {\n          this.internalSearch = (\n            !this.selectedItems.length ||\n            this.multiple ||\n            this.hasSlot\n          )\n            ? null\n            : this.getText(this.selectedItem)\n        }\n      })\n    },\n    updateSelf () {\n      if (\n        !this.searchIsDirty &&\n        !this.internalValue\n      ) return\n\n      if (\n        !this.multiple &&\n        !this.valueComparator(\n          this.internalSearch,\n          this.getValue(this.internalValue)\n        )\n      ) {\n        this.setSearch()\n      }\n    },\n    hasItem (item: any): boolean {\n      return this.selectedValues.indexOf(this.getValue(item)) > -1\n    },\n    onCopy (event: ClipboardEvent) {\n      if (this.selectedIndex === -1) return\n\n      const currentItem = this.selectedItems[this.selectedIndex]\n      const currentItemText = this.getText(currentItem)\n      event.clipboardData?.setData('text/plain', currentItemText)\n      event.clipboardData?.setData('text/vnd.vuetify.autocomplete.item+plain', currentItemText)\n      event.preventDefault()\n    },\n  },\n})\n"],"sourceRoot":""}